# -*- coding: utf-8 -*-
"""Content based.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rF_BnLYa1obXNjsZptCEJ5raCTgPTd2x

## Content Based Recommender System
"""

import numpy as np
import pandas as pd

"""Loading u.data -> A dataset comprising user id, movie id, rating and timestamp"""

column_names= ['user id', 'movie id', 'rating', 'timestamp']
u_data = pd.read_csv('u.data', sep='\t',header=None,names=column_names)
print(len(u_data))
u_data.head()

"""Loading u.item -> Dataset comprising movie id, movie title, release date, IMDb URL and 19 fields of genre (1 indicates the movie is of that genre, a 0 indicates it is not)"""

c = 'movie id | movie title | release date | video release date | IMDb URL | unknown | Action | Adventure | Animation | Children | Comedy | Crime | Documentary | Drama | Fantasy | Film-Noir | Horror | Musical | Mystery | Romance | Sci-Fi | Thriller | War | Western'
column_names2 = c.split(' | ')
column_names2

data_items = pd.read_csv('u.item', sep='|',header=None,names=column_names2,encoding='latin-1')
data_items

"""Merging u.data and u.items"""

merged_data = pd.merge(u_data, data_items[['movie id', 'movie title']], how='left', left_on='movie id', right_on='movie id')
print(len(merged_data))
print(merged_data)

"""There is an issue with this dataset that for the same set of user id and movie id, ratings can be different at different timestamps. Example of such duplicates are shown below:-"""

duplicates = merged_data[merged_data.duplicated(['user id', 'movie title', 'rating'], keep=False)]
duplicates

"""Therefore a dataset is created from the existing merged dataset by grouping the unique user id and movie title combination and the ratings by a user to the same movie in different instances (timestamps) are averaged and stored in the new dataset."""

dataset = merged_data.groupby(by=['user id','movie title'], as_index=False).agg({"rating":"mean"})
print(len(dataset))
dataset.head()

avg_ratings = pd.DataFrame(dataset.groupby('movie title')['rating'].mean())
print(avg_ratings.shape)
avg_ratings.head()

avg_ratings['num_of_ratings'] = pd.DataFrame(dataset.groupby('movie title')['rating'].count())
avg_ratings.head()

user_to_movie_dataset = dataset.pivot(
    index='user id',
     columns='movie title',
      values='rating').fillna(0)

user_to_movie_dataset

avg_ratings.sort_values(by='num_of_ratings', ascending=False).head()

starwars_ratings = user_to_movie_dataset['Star Wars (1977)']
contact_ratings = user_to_movie_dataset['Contact (1997)']

starwars_ratings

contact_ratings

similar_to_starwars = user_to_movie_dataset.corrwith(starwars_ratings)
print(similar_to_starwars.shape)
similar_to_starwars.head()

similar_to_contact = user_to_movie_dataset.corrwith(contact_ratings)
similar_to_contact.head()

correlation_starwars = pd.DataFrame(similar_to_starwars, columns=['Correlation'])

correlation_starwars.sort_values(by='Correlation', ascending=False).head(10)

correlation_starwars = correlation_starwars.join(avg_ratings['num_of_ratings'])
correlation_starwars.head()

correlation_starwars.sort_values('Correlation',ascending=False).head(20)

new_corr_starwars = correlation_starwars[correlation_starwars['num_of_ratings'] > 100]
new_corr_starwars.sort_values('Correlation',ascending=False).head(20)

def recommender(movie, min_num_reviews):

    movie_ratings = user_to_movie_dataset[movie]
    similar_to_movie = user_to_movie_dataset.corrwith(movie_ratings)
    correlation_movie = pd.DataFrame(similar_to_movie, columns=['Correlation'])
    correlation_movie.dropna(inplace=True)
    correlation_movie = correlation_movie.join(avg_ratings['num_of_ratings'])
    correlation_movie = correlation_movie[correlation_movie['num_of_ratings'] >= min_num_reviews]
    return correlation_movie.sort_values('Correlation',ascending=False).head(20)

recommender('Star Wars (1977)', 100)

recommender('Terminator 2: Judgment Day (1991)',100)

recommender('Die Hard 2 (1990)',100)