# -*- coding: utf-8 -*-
"""KnowledgeBasedRecommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KLSZFwPe01oKjCM4k2jdACqdvycjREaS
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

overall = pd.read_csv("u.info.txt", header=None)
print("Details of users, items and ratings involved in the loaded movielens dataset: ",list(overall[0]))

colnames1 = ['user id','movie id','rating','timestamp']
dataset = pd.read_csv("u.data.txt", sep='\t',header=None,names=colnames1)
dataset.head()

len(dataset), max(dataset['movie id']),min(dataset['movie id'])

d = 'movie id , movie title , release date , video release date , IMDb URL , unknown , Action , Adventure , Animation , Children , Comedy , Crime , Documentary , Drama , Fantasy , Film-Noir , Horror , Musical , Mystery , Romance , Sci-Fi , Thriller , War , Western'
colnames2 = d.split(' , ')
colnames2

items_dataset = pd.read_csv("u.item.txt", sep='|',header=None,names=colnames2,encoding='latin-1')
items_dataset

movie_dataset = items_dataset[['movie id','movie title']]
movie_dataset.head()

merged_dataset = pd.merge(dataset, movie_dataset, how='inner', on='movie id')
merged_dataset.head()
merged_dataset.describe()

highavg_rating_movies = merged_dataset.groupby(['movie title']).agg({"rating":"mean"})['rating'].sort_values(ascending=False)
highavg_rating_movies = highavg_rating_movies.to_frame()
highavg_rating_movies.head(20)

print('Split of movies count based on their overall average rating')
# Pie chart, where the slices will be ordered and plotted counter-clockwise:
labels = '5 star', '4 to 5 star', '3 to 4 star', '2 to 3 star', '1 to 2 star'
sizes = [10, 163, 871, 492, 128]
# explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')

fig1, ax1 = plt.subplots()
ax1.pie(sizes, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

plt.show()

highavg_rating_movies.reset_index(level=0, inplace=True)
highavg_rating_movies.columns = ['movie title', 'avg rating']
highavg_rating_movies.head(10)

merged_dataset.groupby(['movie title']).agg({"rating":"sum"})['rating'].sort_values(ascending=False)
merged_dataset['movie id'].value_counts(sort=False).plot(kind='bar' ,figsize=(20,6), use_index = True, rot=0)
plt.title('Bar plot of frequency of a movie being watched')
plt.xlabel('Movies')
plt.ylabel('Number of times a user watched that movie')

popular_movies = merged_dataset.groupby(['movie title']).agg({"rating":"count"})['rating'].sort_values(ascending=False)
popular_movies = popular_movies.to_frame()
popular_movies.reset_index(level=0, inplace=True)
popular_movies.columns = ['movie title', 'Number of Users watched']

a1=len(popular_movies[popular_movies['Number of Users watched'] >= 500])
a2=len(popular_movies[(popular_movies['Number of Users watched'] >= 400) & (popular_movies['Number of Users watched'] < 500)])
a3=len(popular_movies[(popular_movies['Number of Users watched'] >= 300) & (popular_movies['Number of Users watched'] < 400)])
a4=len(popular_movies[(popular_movies['Number of Users watched'] >= 200) & (popular_movies['Number of Users watched'] < 300)])
a5=len(popular_movies[(popular_movies['Number of Users watched'] >= 100) & (popular_movies['Number of Users watched'] < 200)])
a6=len(popular_movies[(popular_movies['Number of Users watched'] < 100)])
df = pd.DataFrame({'viewers': [a1, a2, a3, a4, a5, a6]},
                  index=['500 viewers', '400 to 500 viewers', '300 to 400 viewers', '200 to 300 viewers', '100 to 200 viewers', 'less than 100 viewers'])
plot = df.plot.pie(y='viewers', figsize=(5, 5))

print(popular_movies[popular_movies['Number of Users watched'] >= 400])

highly_rated_popular_movies = pd.merge(avg_highly_rated_movies, popular_movies, how = 'inner', on='movie title')
highly_rated_popular_movies.head(10)
print(highly_rated_popular_movies[highly_rated_popular_movies['Number of Users watched']>400])

print(highly_rated_popular_movies[(highly_rated_popular_movies['Number of Users watched']>300) & (highly_rated_popular_movies['avg rating']>=4.0)])

movie_genre_list = colnames2[-19:]
movie_genre_list

count = []
for i in movie_genre_list:
  genre_based_movies = items_dataset[['movie id','movie title',i]]
  genre_based_movies = genre_based_movies[genre_based_movies[i] == 1]
  count.append(len(genre_based_movies))
df = pd.DataFrame({'Movie genre':movie_genre_list, 'Number of movies':count})
ax = df.plot.bar(x='Movie genre', y='Number of movies', rot=60, figsize=(10, 5))

def star_based_visualization(dataframe):
  dataframe['rating'].value_counts(sort=False).plot(kind='bar' ,figsize=(10,6), use_index = True, rot=0)
  plt.title('Bar plot of rating frequency')
  plt.xlabel('Rating')
  plt.ylabel('Number of times a rating was given')
  plt.show()
  print("Total number of users watched this Genre: ",len(dataframe))
  print("  ")

def recommendations_genre(genre):
  x = genre
  print("GENRE: ", x)
  print("    ")
  genre_based_movies = items_dataset[['movie id','movie title',x]]
  genre_based_movies = genre_based_movies[genre_based_movies[x] == 1]
  merged_genre_movies = pd.merge(dataset, genre_based_movies, how='inner', on='movie id')

  star_based_visualization(merged_genre_movies)
  high_rated_movies = merged_genre_movies.groupby(['movie title']).agg({"rating":"mean"})['rating'].sort_values(ascending=False)
  high_rated_movies = high_rated_movies.to_frame()
  print("                             ")
  print("                             ")
  print("Top movies naviely suggested to the new users for the requested movie genre:", x, ". Recommendations based on highest average ratings.")
  print(high_rated_movies.head(10))

  popular_movies_ingenre = merged_genre_movies.groupby(['movie title']).agg({"rating":"count"})['rating'].sort_values(ascending=False)
  popular_movies_ingenre = popular_movies_ingenre.to_frame()
  popular_movies_ingenre.reset_index(level=0, inplace=True)
  popular_movies_ingenre.columns = ['movie title', 'Number of Users watched']
  print("                             ")
  print("                             ")
  print("Most popular movies recommended to a new user for",x,"genre. Recommendations based on Popularity")
  print(popular_movies_ingenre.sort_values('Number of Users watched', ascending=False).head(10))

  highly_rated_popular_movies = pd.merge(high_rated_movies, popular_movies_ingenre, how = 'inner', on='movie title')

  viewer_limit = 300
  ratings_limit = 4.0
  count = 0
  check = 0
  while viewer_limit > 0 and ratings_limit > 0:
    s = highly_rated_popular_movies[(highly_rated_popular_movies['Number of Users watched']>viewer_limit) & (highly_rated_popular_movies['rating']>=ratings_limit)]
    if len(s) < 11:
      if check == 0:
        viewer_limit -= 50
        check = 1
      else:
        ratings_limit -= 0.5
        check = 0
    else:
      break
  print("Movies best to suggest to a new user within requested genre; popular and well rated by the users who already watched them.")
  print("These have rating more than ",ratings_limit," with atleast ",viewer_limit ," viewers.")
  print("                             ")
  print("These are the Top rated popular movies")
  print(s)
  print("                             ")
  print("                             ")

for i in movie_genre_list[1:]:
  print(recommendations_genre(i))